// <auto-generated />
using System;
using API.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(MainDatabase))]
    partial class MainDatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Models.Channel", b =>
                {
                    b.Property<int>("ChannelID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("ServerID");

                    b.HasKey("ChannelID");

                    b.HasIndex("ServerID");

                    b.ToTable("Channel");

                    b.HasData(
                        new
                        {
                            ChannelID = 1,
                            Name = "General",
                            ServerID = 1
                        },
                        new
                        {
                            ChannelID = 2,
                            Name = "Boss",
                            ServerID = 1
                        },
                        new
                        {
                            ChannelID = 3,
                            Name = "Random Encounter",
                            ServerID = 1
                        },
                        new
                        {
                            ChannelID = 4,
                            Name = "Origin",
                            ServerID = 2
                        },
                        new
                        {
                            ChannelID = 5,
                            Name = "Ys7",
                            ServerID = 2
                        },
                        new
                        {
                            ChannelID = 6,
                            Name = "Ys8",
                            ServerID = 2
                        },
                        new
                        {
                            ChannelID = 7,
                            Name = "General",
                            ServerID = 3
                        },
                        new
                        {
                            ChannelID = 8,
                            Name = "Secret",
                            ServerID = 3
                        });
                });

            modelBuilder.Entity("API.Models.ChannelRolePermission", b =>
                {
                    b.Property<int>("ChannelID");

                    b.Property<int>("RoleID");

                    b.Property<string>("PermissionID");

                    b.HasKey("ChannelID", "RoleID", "PermissionID");

                    b.HasIndex("PermissionID");

                    b.HasIndex("RoleID");

                    b.ToTable("ChannelRolePermission");

                    b.HasData(
                        new
                        {
                            ChannelID = 1,
                            RoleID = 1,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 1,
                            RoleID = 2,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 1,
                            RoleID = 3,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 1,
                            RoleID = 4,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 2,
                            RoleID = 1,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 2,
                            RoleID = 2,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 2,
                            RoleID = 3,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 2,
                            RoleID = 4,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 3,
                            RoleID = 1,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 3,
                            RoleID = 2,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 3,
                            RoleID = 3,
                            PermissionID = "no_chat"
                        },
                        new
                        {
                            ChannelID = 3,
                            RoleID = 4,
                            PermissionID = "no_chat"
                        },
                        new
                        {
                            ChannelID = 4,
                            RoleID = 1,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 4,
                            RoleID = 2,
                            PermissionID = "no_view"
                        },
                        new
                        {
                            ChannelID = 4,
                            RoleID = 3,
                            PermissionID = "no_view"
                        },
                        new
                        {
                            ChannelID = 5,
                            RoleID = 1,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 5,
                            RoleID = 2,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 5,
                            RoleID = 3,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 6,
                            RoleID = 1,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 6,
                            RoleID = 2,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 6,
                            RoleID = 3,
                            PermissionID = "no_view"
                        },
                        new
                        {
                            ChannelID = 7,
                            RoleID = 1,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 7,
                            RoleID = 2,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 7,
                            RoleID = 3,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 8,
                            RoleID = 1,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 8,
                            RoleID = 2,
                            PermissionID = "full"
                        },
                        new
                        {
                            ChannelID = 8,
                            RoleID = 3,
                            PermissionID = "no_chat"
                        });
                });

            modelBuilder.Entity("API.Models.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChannelID");

                    b.Property<string>("Content");

                    b.Property<DateTime>("Time");

                    b.Property<int>("UserID");

                    b.HasKey("MessageID");

                    b.HasIndex("ChannelID");

                    b.HasIndex("UserID");

                    b.ToTable("Message");

                    b.HasData(
                        new
                        {
                            MessageID = 1,
                            ChannelID = 1,
                            Content = "This is the first message in final fantasy",
                            Time = new DateTime(2019, 1, 1, 0, 0, 0, 1, DateTimeKind.Unspecified),
                            UserID = 1
                        },
                        new
                        {
                            MessageID = 2,
                            ChannelID = 1,
                            Content = "And this is the second message in final fantasy",
                            Time = new DateTime(2019, 1, 2, 0, 0, 1, 245, DateTimeKind.Unspecified),
                            UserID = 2
                        },
                        new
                        {
                            MessageID = 3,
                            ChannelID = 1,
                            Content = "AAAAAAAAAA",
                            Time = new DateTime(2019, 1, 2, 0, 0, 2, 368, DateTimeKind.Unspecified),
                            UserID = 3
                        },
                        new
                        {
                            MessageID = 4,
                            ChannelID = 2,
                            Content = "Another channel in final fantasy",
                            Time = new DateTime(2019, 1, 2, 0, 0, 1, 123, DateTimeKind.Unspecified),
                            UserID = 1
                        },
                        new
                        {
                            MessageID = 5,
                            ChannelID = 2,
                            Content = "BBBBBBBBBBBBBB",
                            Time = new DateTime(2019, 1, 2, 0, 0, 2, 899, DateTimeKind.Unspecified),
                            UserID = 1
                        },
                        new
                        {
                            MessageID = 6,
                            ChannelID = 2,
                            Content = "Hi there",
                            Time = new DateTime(2019, 1, 2, 0, 0, 3, 543, DateTimeKind.Unspecified),
                            UserID = 2
                        });
                });

            modelBuilder.Entity("API.Models.Permission", b =>
                {
                    b.Property<string>("PermissionID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("PermissionID");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            PermissionID = "full",
                            Description = "Will allow users to do anything",
                            Name = "full"
                        },
                        new
                        {
                            PermissionID = "no_react",
                            Description = "Won't allow users to give reactions",
                            Name = "no react"
                        },
                        new
                        {
                            PermissionID = "no_chat",
                            Description = "Won't allow users to chat",
                            Name = "no chat"
                        },
                        new
                        {
                            PermissionID = "no_view",
                            Description = "Won't allow users to see anything",
                            Name = "no view"
                        });
                });

            modelBuilder.Entity("API.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("ServerID");

                    b.HasKey("RoleID");

                    b.HasIndex("ServerID");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            Name = "Knight",
                            ServerID = 1
                        },
                        new
                        {
                            RoleID = 2,
                            Name = "Thief",
                            ServerID = 1
                        },
                        new
                        {
                            RoleID = 3,
                            Name = "White Wizard",
                            ServerID = 1
                        },
                        new
                        {
                            RoleID = 4,
                            Name = "Black Wizard",
                            ServerID = 1
                        },
                        new
                        {
                            RoleID = 5,
                            Name = "Adol",
                            ServerID = 2
                        },
                        new
                        {
                            RoleID = 6,
                            Name = "Dogi",
                            ServerID = 2
                        },
                        new
                        {
                            RoleID = 7,
                            Name = "Aisha",
                            ServerID = 2
                        },
                        new
                        {
                            RoleID = 8,
                            Name = "Admin",
                            ServerID = 3
                        },
                        new
                        {
                            RoleID = 9,
                            Name = "Artist",
                            ServerID = 3
                        },
                        new
                        {
                            RoleID = 10,
                            Name = "Folk",
                            ServerID = 3
                        });
                });

            modelBuilder.Entity("API.Models.Server", b =>
                {
                    b.Property<int>("ServerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdminID");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.HasKey("ServerID");

                    b.HasIndex("AdminID");

                    b.ToTable("Server");

                    b.HasData(
                        new
                        {
                            ServerID = 1,
                            AdminID = 1,
                            Image = "server_1.png",
                            Name = "Final Fantasy"
                        },
                        new
                        {
                            ServerID = 2,
                            AdminID = 1,
                            Image = "server_2.png",
                            Name = "Ys"
                        },
                        new
                        {
                            ServerID = 3,
                            AdminID = 2,
                            Image = "server_3.png",
                            Name = "Hentai Maiden"
                        });
                });

            modelBuilder.Entity("API.Models.ServerUser", b =>
                {
                    b.Property<int>("ServerID");

                    b.Property<int>("UserID");

                    b.HasKey("ServerID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("ServerUser");

                    b.HasData(
                        new
                        {
                            ServerID = 1,
                            UserID = 1
                        },
                        new
                        {
                            ServerID = 2,
                            UserID = 1
                        },
                        new
                        {
                            ServerID = 3,
                            UserID = 2
                        },
                        new
                        {
                            ServerID = 1,
                            UserID = 2
                        },
                        new
                        {
                            ServerID = 1,
                            UserID = 3
                        },
                        new
                        {
                            ServerID = 2,
                            UserID = 2
                        },
                        new
                        {
                            ServerID = 2,
                            UserID = 3
                        },
                        new
                        {
                            ServerID = 2,
                            UserID = 4
                        },
                        new
                        {
                            ServerID = 3,
                            UserID = 1
                        },
                        new
                        {
                            ServerID = 3,
                            UserID = 4
                        });
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName");

                    b.Property<int?>("Gender");

                    b.Property<string>("Image");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("UserID");

                    b.HasIndex("Email");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Email = "daophilac@gmail.com",
                            FirstName = "Đào Phi",
                            Gender = 0,
                            Image = "user_1.png",
                            LastName = "Lạc",
                            Password = "123",
                            UserName = "peanut"
                        },
                        new
                        {
                            UserID = 2,
                            Email = "daophilac1@gmail.com",
                            FirstName = "Đào Phi",
                            Gender = 0,
                            Image = "user_2.png",
                            LastName = "Lạc",
                            Password = "123",
                            UserName = "peanut"
                        },
                        new
                        {
                            UserID = 3,
                            Email = "lucknight@gmail.com",
                            FirstName = "luck",
                            Gender = 0,
                            Image = "user_3.png",
                            LastName = "night",
                            Password = "123",
                            UserName = "lucknight"
                        },
                        new
                        {
                            UserID = 4,
                            Email = "eddie@gmail.com",
                            FirstName = "ed",
                            Gender = 0,
                            Image = "user_4.png",
                            LastName = "die",
                            Password = "123",
                            UserName = "eddie"
                        });
                });

            modelBuilder.Entity("API.Models.Channel", b =>
                {
                    b.HasOne("API.Models.Server", "Server")
                        .WithMany("Channels")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.ChannelRolePermission", b =>
                {
                    b.HasOne("API.Models.Channel", "Channel")
                        .WithMany("ChannelRolePermissions")
                        .HasForeignKey("ChannelID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Permission", "Permission")
                        .WithMany("ChannelRolePermissions")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.Role", "Role")
                        .WithMany("ChannelRolePermissions")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Message", b =>
                {
                    b.HasOne("API.Models.Channel", "Channel")
                        .WithMany("Messages")
                        .HasForeignKey("ChannelID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Role", b =>
                {
                    b.HasOne("API.Models.Server", "Server")
                        .WithMany("Roles")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.Server", b =>
                {
                    b.HasOne("API.Models.User", "Admin")
                        .WithMany("Servers")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("API.Models.ServerUser", b =>
                {
                    b.HasOne("API.Models.Server", "Server")
                        .WithMany("ServerUsers")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
